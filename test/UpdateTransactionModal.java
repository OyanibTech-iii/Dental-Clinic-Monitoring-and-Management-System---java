/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class UpdateTransactionModal extends javax.swing.JPanel {

    private int currentTypeID = -1;

    /**
     * Creates new form UpdateTransactionModal
     */
    public UpdateTransactionModal() {
        initComponents();
    }

    public void setTransactionData(String transType, String desc, String cost, int typeID) {
        // Set the text fields with current data instead of "NONE"
        this.currentTypeID = typeID;
        transTypeUpdate.setText(transType);
        descUpdate.setText(desc);
        costUpdate.setText(cost);

        // Update the labels to show current values instead of [NONE]
        jLabel1.setText("Transaction Type [" + (transType.isEmpty() ? "NONE" : transType) + "]:");
        jLabel2.setText("Description [" + (desc.isEmpty() ? "NONE" : desc) + "]:");
        jLabel3.setText("Default Cost [" + (cost.isEmpty() ? "NONE" : "â‚±" + cost) + "]:");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customScrollBar1 = new test.CustomScrollBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        updateBtn = new test.CustomButton();
        transTypeUpdate = new javax.swing.JTextField();
        descUpdate = new javax.swing.JTextField();
        costUpdate = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 119, 204));
        setMaximumSize(new java.awt.Dimension(327, 100));
        setMinimumSize(new java.awt.Dimension(327, 100));
        setPreferredSize(new java.awt.Dimension(327, 100));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Transaction Type [NONE]:");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Description [NONE]:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Default Cost [NONE]:");

        updateBtn.setBackground(new java.awt.Color(0, 51, 0));
        updateBtn.setForeground(new java.awt.Color(255, 255, 255));
        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/updateBtn.png"))); // NOI18N
        updateBtn.setText("Update Details");
        updateBtn.setBorderColor(new java.awt.Color(0, 51, 0));
        updateBtn.setColor(new java.awt.Color(0, 51, 0));
        updateBtn.setColorClick(new java.awt.Color(3, 29, 5));
        updateBtn.setColorOver(new java.awt.Color(0, 102, 0));
        updateBtn.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        updateBtn.setRadius(12);
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        transTypeUpdate.setBackground(new java.awt.Color(0, 119, 204));
        transTypeUpdate.setFont(new java.awt.Font("Poppins Light", 0, 12)); // NOI18N
        transTypeUpdate.setForeground(new java.awt.Color(255, 255, 255));
        transTypeUpdate.setBorder(null);

        descUpdate.setBackground(new java.awt.Color(0, 119, 204));
        descUpdate.setFont(new java.awt.Font("Poppins Light", 0, 12)); // NOI18N
        descUpdate.setForeground(new java.awt.Color(255, 255, 255));
        descUpdate.setBorder(null);

        costUpdate.setBackground(new java.awt.Color(0, 119, 204));
        costUpdate.setFont(new java.awt.Font("Poppins Light", 0, 12)); // NOI18N
        costUpdate.setForeground(new java.awt.Color(255, 255, 255));
        costUpdate.setBorder(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transTypeUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(costUpdate))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descUpdate))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(transTypeUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(descUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(costUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        updateTransactionType();
    }//GEN-LAST:event_updateBtnActionPerformed
    private void updateTransactionType() {
        String newTransType = transTypeUpdate.getText().trim();
        String newDesc = descUpdate.getText().trim();
        String newCost = costUpdate.getText().trim();

        // Validate input
        if (newTransType.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Transaction Type cannot be empty!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (currentTypeID == -1) {
            JOptionPane.showMessageDialog(this, "No transaction type selected for update!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate cost if provided
        if (!newCost.isEmpty()) {
            try {
                Double.parseDouble(newCost);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid cost amount!", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        Connection conn = null;
        PreparedStatement pstmt = null;

        try {
            conn = DbConnection.connectToDb();

            String sql = "UPDATE transactiontype SET TypeName = ?, Description = ?, DefaultCost = ? WHERE TypeID = ?";
            pstmt = conn.prepareStatement(sql);

            pstmt.setString(1, newTransType);
            pstmt.setString(2, newDesc.isEmpty() ? null : newDesc);

            // Handle cost - set to null if empty, otherwise parse as decimal
            if (newCost.isEmpty()) {
                pstmt.setNull(3, java.sql.Types.DECIMAL);
            } else {
                pstmt.setBigDecimal(3, new java.math.BigDecimal(newCost));
            }

            pstmt.setInt(4, currentTypeID); // This was missing in the original code!

            int rowsAffected = pstmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Transaction Type updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Hide this modal and refresh the parent
                this.setVisible(false);
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField costUpdate;
    private test.CustomScrollBar customScrollBar1;
    private javax.swing.JTextField descUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField transTypeUpdate;
    private test.CustomButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
