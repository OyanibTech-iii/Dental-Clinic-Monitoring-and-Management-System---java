/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package test;

import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class UpdateTransactionModal extends javax.swing.JPanel implements TransactionTypeServiceAware {

    private TransactionTypeService transactionTypeService;
    private int typeID;

    public UpdateTransactionModal() {
        initComponents();
        addPlaceholderListeners();
    }

    @Override
    public void setTransactionTypeService(TransactionTypeService transactionTypeService) {
        this.transactionTypeService = transactionTypeService;
    }

    // Set transaction data in the form fields
    public void setTransactionData(String transType, String desc, String cost, int typeID) {
        this.typeID = typeID;
        transTypeUpdate.setText(transType.isEmpty() ? "Type Container" : transType);
        descUpdate.setText(desc.isEmpty() ? "Description Container" : desc);
        costUpdate.setText(cost.isEmpty() ? "Cost Container" : cost);

        jLabel1.setText("Transaction Type [" + (transType.isEmpty() ? "NONE" : transType) + "]:");
        jLabel2.setText("Description [" + (desc.isEmpty() ? "NONE" : desc) + "]:");
        jLabel3.setText("Default Cost [" + (cost.isEmpty() ? "NONE" : "â‚±" + cost) + "]:");
    }

    // Getter methods for form fields
    public String getTransactionType() {
        String text = transTypeUpdate.getText().trim();
        return text.equals("Type Container") ? "" : text;
    }

    public String getDescription() {
        String text = descUpdate.getText().trim();
        return text.equals("Description Container") ? "" : text;
    }

    public String getDefaultCost() {
        String text = costUpdate.getText().trim();
        return text.equals("Cost Container") ? "" : text;
    }

    // Add focus listeners to clear placeholder text
    private void addPlaceholderListeners() {
        transTypeUpdate.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (transTypeUpdate.getText().equals("Type Container")) {
                    transTypeUpdate.setText("");
                }
            }
        });

        descUpdate.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (descUpdate.getText().equals("Description Container")) {
                    descUpdate.setText("");
                }
            }
        });

        costUpdate.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (costUpdate.getText().equals("Cost Container")) {
                    costUpdate.setText("");
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customScrollBar1 = new test.CustomScrollBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        updateBtn = new test.CustomButton();
        transTypeUpdate = new javax.swing.JTextField();
        descUpdate = new javax.swing.JTextField();
        costUpdate = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 119, 204));
        setMaximumSize(new java.awt.Dimension(327, 100));
        setMinimumSize(new java.awt.Dimension(327, 100));
        setPreferredSize(new java.awt.Dimension(327, 100));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Transaction Type :");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Description :");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Default Cost :");

        updateBtn.setBackground(new java.awt.Color(0, 51, 0));
        updateBtn.setForeground(new java.awt.Color(255, 255, 255));
        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/updateBtn.png"))); // NOI18N
        updateBtn.setText("Save Changes");
        updateBtn.setBorderColor(new java.awt.Color(0, 51, 0));
        updateBtn.setColor(new java.awt.Color(0, 51, 0));
        updateBtn.setColorClick(new java.awt.Color(3, 29, 5));
        updateBtn.setColorOver(new java.awt.Color(0, 102, 0));
        updateBtn.setFont(new java.awt.Font("Poppins Medium", 0, 12)); // NOI18N
        updateBtn.setRadius(12);
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        transTypeUpdate.setBackground(new java.awt.Color(0, 119, 204));
        transTypeUpdate.setFont(new java.awt.Font("Poppins Light", 0, 12)); // NOI18N
        transTypeUpdate.setForeground(new java.awt.Color(255, 255, 255));
        transTypeUpdate.setText("Type Container");
        transTypeUpdate.setBorder(null);

        descUpdate.setBackground(new java.awt.Color(0, 119, 204));
        descUpdate.setFont(new java.awt.Font("Poppins Light", 0, 12)); // NOI18N
        descUpdate.setForeground(new java.awt.Color(255, 255, 255));
        descUpdate.setText("Description Container");
        descUpdate.setBorder(null);

        costUpdate.setBackground(new java.awt.Color(0, 119, 204));
        costUpdate.setFont(new java.awt.Font("Poppins Light", 0, 12)); // NOI18N
        costUpdate.setForeground(new java.awt.Color(255, 255, 255));
        costUpdate.setText("Cost Container");
        costUpdate.setBorder(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transTypeUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(costUpdate))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descUpdate))
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(transTypeUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(descUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(costUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        MouseClick.playClickSound();
        String typeName = getTransactionType();
        String description = getDescription();
        String defaultCostText = getDefaultCost();

        // Validation
        if (typeName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a transaction type name.", "Validation Error", JOptionPane.WARNING_MESSAGE);
            transTypeUpdate.requestFocus();
            return;
        }

        if (description.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a description.", "Validation Error", JOptionPane.WARNING_MESSAGE);
            descUpdate.requestFocus();
            return;
        }

        if (defaultCostText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a default cost.", "Validation Error", JOptionPane.WARNING_MESSAGE);
            costUpdate.requestFocus();
            return;
        }

        // Validate default cost is a valid number
        double defaultCost;
        try {
            defaultCost = Double.parseDouble(defaultCostText);
            if (defaultCost < 0) {
                JOptionPane.showMessageDialog(this, "Default cost cannot be negative.", "Validation Error", JOptionPane.WARNING_MESSAGE);
                costUpdate.requestFocus();
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for default cost.", "Validation Error", JOptionPane.WARNING_MESSAGE);
            costUpdate.requestFocus();
            return;
        }

        // Check if service is available
        if (transactionTypeService == null) {
            JOptionPane.showMessageDialog(this, "Transaction service is not available.", "Service Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create TransactionType object
        TransactionType updatedType = new TransactionType();
        updatedType.setTypeID(typeID);
        updatedType.setTypeName(typeName);
        updatedType.setDescription(description);
        updatedType.setDefaultCost(defaultCost);

        // Update using service
        try {
            int result = transactionTypeService.updateTransactionType(updatedType);
            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Transaction type updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Clear the form fields
                transTypeUpdate.setText("Type Container");
                descUpdate.setText("Description Container");
                costUpdate.setText("Cost Container");

                // Refresh the parent table
                if (getParent() instanceof UpdateTransactionType) {
                    ((UpdateTransactionType) getParent()).viewAllTransactionType();
                }

                // Hide the modal
                this.setVisible(false);

                // Play success sound
                try {
                    MouseClick.playClickSound();
                } catch (Exception soundEx) {
                    // Ignore if sound class is not available
                }
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update transaction type. ID may not exist.", "Update Failed", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            System.err.println("Error updating transaction type: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error updating transaction type: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

    }//GEN-LAST:event_updateBtnActionPerformed
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField costUpdate;
    private test.CustomScrollBar customScrollBar1;
    private javax.swing.JTextField descUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField transTypeUpdate;
    private test.CustomButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
