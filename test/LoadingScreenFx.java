/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package test;

import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.Timer;

/**
 *
 * @author Admin
 */
public class LoadingScreenFx extends javax.swing.JFrame {

    private Timer progressTimer;
    private int currentProgress = 0;
    private String[] loadingTexts = {
        "Initializing...",
        "Loading resources...",
        "Preparing interface...",
        "Almost ready...",
        "Complete!"
    };
    private int textIndex = 0;
    private final String username;

    /**
     * Creates new form LoadingScreenFx
     */
public LoadingScreenFx(String username) {
        this.username = username; 
        setUndecorated(true);
        initComponents();
        setupProgressBar();
        startLoading();
        setIconImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        loadingText = new javax.swing.JLabel();
        progressLabel = new javax.swing.JLabel();
        progressBar = new test.CustomProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));

        jPanel1.setBackground(new java.awt.Color(0, 119, 204));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/LoadingIllustration.png"))); // NOI18N

        loadingText.setFont(new java.awt.Font("Poppins Light", 0, 12)); // NOI18N
        loadingText.setForeground(new java.awt.Color(255, 255, 255));
        loadingText.setText("Loading......");

        progressLabel.setFont(new java.awt.Font("Poppins Light", 0, 12)); // NOI18N
        progressLabel.setForeground(new java.awt.Color(255, 255, 255));
        progressLabel.setText("0%");

        progressBar.setMaximumSize(new java.awt.Dimension(32767, 8));
        progressBar.setMinimumSize(new java.awt.Dimension(10, 8));
        progressBar.setPreferredSize(new java.awt.Dimension(10, 8));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(loadingText, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(569, 569, 569)
                        .addComponent(progressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadingText)
                    .addComponent(progressLabel))
                .addGap(0, 0, 0)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private void setupProgressBar() {
        // Set the progress bar color to #ffb53c
        progressBar.setForeground(new Color(0xFFB53C));
        progressBar.setBackground(Color.LIGHT_GRAY);
        progressBar.setValue(0);
        progressBar.setStringPainted(false); // We'll use a separate label for percentage
    }

    private void startLoading() {
        // Timer that updates every 40ms (2000ms / 50 steps = 40ms per step for smooth animation)
        progressTimer = new Timer(50, e -> {
            currentProgress += 2; // Increase by 2% each time (50 steps total)

            if (currentProgress <= 100) {
                progressBar.setValue(currentProgress);
                progressLabel.setText(currentProgress + "%");

                // Update loading text based on progress
                int newTextIndex = (currentProgress * loadingTexts.length) / 100;
                if (newTextIndex >= loadingTexts.length) {
                    newTextIndex = loadingTexts.length - 1;
                }

                if (newTextIndex != textIndex) {
                    textIndex = newTextIndex;
                    loadingText.setText(loadingTexts[textIndex]);
                }
            } else {
                // Loading complete
                progressTimer.stop();
                onLoadingComplete();
            }
        });

        progressTimer.start();
    }

private void onLoadingComplete() {
        System.out.println("Loading completed!");

        // Create a Timer for the 2-second delay
        Timer delayTimer = new Timer(1000, e -> {
            // Navigate to LandingPage with the username
            LandingPage land = new LandingPage(username);
            land.setVisible(true);
            dispose(); // Close the loading screen
        });
        delayTimer.setRepeats(false); // Run only once
        delayTimer.start();
    }

    // Method to restart the loading animation
    public void restartLoading() {
        if (progressTimer != null && progressTimer.isRunning()) {
            progressTimer.stop();
        }
        currentProgress = 0;
        textIndex = 0;
        progressBar.setValue(0);
        progressLabel.setText("0%");
        loadingText.setText(loadingTexts[0]);
        startLoading();
    }

    // Method to stop the loading animation
    public void stopLoading() {
        if (progressTimer != null && progressTimer.isRunning()) {
            progressTimer.stop();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadingScreenFx.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadingScreenFx.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadingScreenFx.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadingScreenFx.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadingScreenFx.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               new LoadingScreenFx("Guest").setVisible(true); 
            }
        });
    }
  private void setIconImage() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../icon/32x32LOGO.png")));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel loadingText;
    private test.CustomProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    // End of variables declaration//GEN-END:variables
}

